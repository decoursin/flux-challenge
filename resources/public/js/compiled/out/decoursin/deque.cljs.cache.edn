;; Analyzed by ClojureScript 1.7.189
{:use-macros nil, :excludes #{}, :name decoursin.deque, :imports nil, :requires {s schema.core, schema.core schema.core}, :uses nil, :defs {assoc-sith {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 14, :column 4, :end-line 14, :end-column 14, :protocol decoursin.deque/ISith, :doc "just assoc, with key validation", :arglists (quote ([this k sith]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/assoc-sith, :variadic false, :file "src/decoursin/deque.cljs", :end-column 14, :method-params ([this k sith]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this k sith])), :doc "just assoc, with key validation"}, is-empty? {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 19, :column 4, :end-line 19, :end-column 13, :protocol decoursin.deque/ISith, :doc "true if all 5 elements are empty", :arglists (quote ([this]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/is-empty?, :variadic false, :file "src/decoursin/deque.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "true if all 5 elements are empty"}, set-default-in-deque! {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 24, :column 7, :end-line 24, :end-column 28, :arglists (quote ([a]))}, :name decoursin.deque/set-default-in-deque!, :variadic false, :file "src/decoursin/deque.cljs", :end-column 28, :method-params ([a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a]))}, ISith {:meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 13, :column 14, :end-line 13, :end-column 19, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {assoc-sith [[this k sith]], in? [[this id]], set-direction [[this direction]], empty-at-location? [[this location]], count-blanks [[this direction]], is-empty? [[this]], get-first-non-empty-sith [[this direction]]}}}, :protocol-symbol true, :name decoursin.deque/ISith, :file "src/decoursin/deque.cljs", :end-column 19, :column 1, :line 13, :protocol-info {:methods {assoc-sith [[this k sith]], in? [[this id]], set-direction [[this direction]], empty-at-location? [[this location]], count-blanks [[this direction]], is-empty? [[this]], get-first-non-empty-sith [[this direction]]}}, :info nil, :end-line 13, :impls #{decoursin.deque/x13348 decoursin.deque/x13347}, :doc nil, :jsdoc ("@interface")}, IDeque {:meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 6, :column 14, :end-line 6, :end-column 20, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {-push-front [[this a]], -push-back [[this a]], -pop-front [[this]], -pop-back [[this]], push-up [[this]], push-down [[this]]}}}, :protocol-symbol true, :name decoursin.deque/IDeque, :file "src/decoursin/deque.cljs", :end-column 20, :column 1, :line 6, :protocol-info {:methods {-push-front [[this a]], -push-back [[this a]], -pop-front [[this]], -pop-back [[this]], push-up [[this]], push-down [[this]]}}, :info nil, :end-line 6, :impls #{decoursin.deque/x13348 decoursin.deque/x13347}, :doc nil, :jsdoc ("@interface")}, -push-front {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 7, :column 4, :end-line 7, :end-column 15, :protocol decoursin.deque/IDeque, :doc "push a onto the front", :arglists (quote ([this a]))}, :protocol decoursin.deque/IDeque, :name decoursin.deque/-push-front, :variadic false, :file "src/decoursin/deque.cljs", :end-column 15, :method-params ([this a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 7, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this a])), :doc "push a onto the front"}, assert-count-is-5 {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 36, :column 8, :end-line 36, :end-column 25, :private true, :arglists (quote ([deque]))}, :private true, :name decoursin.deque/assert-count-is-5, :variadic false, :file "src/decoursin/deque.cljs", :end-column 25, :method-params ([deque]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deque]))}, deque {:schema (schema.core/make-fn-schema output-schema13342 [input-schema13343]), :protocol-inline nil, :meta {:arglists (quote ([v])), :file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 40, :column 9, :end-line 40, :end-column 14, :schema (schema.core/make-fn-schema output-schema13342 [input-schema13343]), :doc "Inputs: [v :- (s/pred vector?)]", :raw-arglists (quote ([v :- (s/pred vector?)]))}, :name decoursin.deque/deque, :variadic false, :file "src/decoursin/deque.cljs", :end-column 14, :method-params ([G__13346]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([v :- (s/pred vector?)])), :line 40, :end-line 40, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Inputs: [v :- (s/pred vector?)]"}, set-direction {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 16, :column 4, :end-line 16, :end-column 17, :protocol decoursin.deque/ISith, :doc "set the :direction entry for each sith", :arglists (quote ([this direction]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/set-direction, :variadic false, :file "src/decoursin/deque.cljs", :end-column 17, :method-params ([this direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 16, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this direction])), :doc "set the :direction entry for each sith"}, -pop-back {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 10, :column 4, :end-line 10, :end-column 13, :protocol decoursin.deque/IDeque, :doc "pop the last element", :arglists (quote ([this]))}, :protocol decoursin.deque/IDeque, :name decoursin.deque/-pop-back, :variadic false, :file "src/decoursin/deque.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 10, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "pop the last element"}, push-up {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 11, :column 4, :end-line 11, :end-column 11, :protocol decoursin.deque/IDeque, :doc "push the deque up, removing top, adding default to the bottom", :arglists (quote ([this]))}, :protocol decoursin.deque/IDeque, :name decoursin.deque/push-up, :variadic false, :file "src/decoursin/deque.cljs", :end-column 11, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 11, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "push the deque up, removing top, adding default to the bottom"}, empty-at-location? {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 17, :column 4, :end-line 17, :end-column 22, :protocol decoursin.deque/ISith, :doc "test whether or not there's a sith at location", :arglists (quote ([this location]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/empty-at-location?, :variadic false, :file "src/decoursin/deque.cljs", :end-column 22, :method-params ([this location]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this location])), :doc "test whether or not there's a sith at location"}, get-first-non-empty-sith {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 20, :column 4, :end-line 20, :end-column 28, :protocol decoursin.deque/ISith, :doc "first non-empty sith from bottom or top, depending on direction", :arglists (quote ([this direction]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/get-first-non-empty-sith, :variadic false, :file "src/decoursin/deque.cljs", :end-column 28, :method-params ([this direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this direction])), :doc "first non-empty sith from bottom or top, depending on direction"}, count-blanks {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 18, :column 4, :end-line 18, :end-column 16, :protocol decoursin.deque/ISith, :doc "count how many blanks templates are from the top/bottom", :arglists (quote ([this direction]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/count-blanks, :variadic false, :file "src/decoursin/deque.cljs", :end-column 16, :method-params ([this direction]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this direction])), :doc "count how many blanks templates are from the top/bottom"}, new-deque {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([] [x-or-coll])), :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [x-or-coll]), :arglists ([] [x-or-coll]), :arglists-meta (nil nil)}}, :name decoursin.deque/new-deque, :variadic false, :file "src/decoursin/deque.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [x-or-coll]), :arglists ([] [x-or-coll]), :arglists-meta (nil nil)}, :method-params ([] [x-or-coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists ([] [x-or-coll])}, default {:name decoursin.deque/default, :file "src/decoursin/deque.cljs", :line 22, :column 1, :end-line 22, :end-column 23, :private true, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 22, :column 16, :end-line 22, :end-column 23, :private true}}, in? {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 15, :column 4, :end-line 15, :end-column 7, :protocol decoursin.deque/ISith, :doc "is the sith of this id in this deque? returns boolean", :arglists (quote ([this id]))}, :protocol decoursin.deque/ISith, :name decoursin.deque/in?, :variadic false, :file "src/decoursin/deque.cljs", :end-column 7, :method-params ([this id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this id])), :doc "is the sith of this id in this deque? returns boolean"}, -pop-front {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 9, :column 4, :end-line 9, :end-column 14, :protocol decoursin.deque/IDeque, :doc "pop the first element", :arglists (quote ([this]))}, :protocol decoursin.deque/IDeque, :name decoursin.deque/-pop-front, :variadic false, :file "src/decoursin/deque.cljs", :end-column 14, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "pop the first element"}, -push-back {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 8, :column 4, :end-line 8, :end-column 14, :protocol decoursin.deque/IDeque, :doc "push a onto the back", :arglists (quote ([this a]))}, :protocol decoursin.deque/IDeque, :name decoursin.deque/-push-back, :variadic false, :file "src/decoursin/deque.cljs", :end-column 14, :method-params ([this a]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 8, :max-fixed-arity 2, :fn-var true, :arglists (quote ([this a])), :doc "push a onto the back"}, push-down {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/deque.cljs", :line 12, :column 4, :end-line 12, :end-column 13, :protocol decoursin.deque/IDeque, :doc "push the deque down, removing bottom, adding default to top", :arglists (quote ([this]))}, :protocol decoursin.deque/IDeque, :name decoursin.deque/push-down, :variadic false, :file "src/decoursin/deque.cljs", :end-column 13, :method-params ([this]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([this])), :doc "push the deque down, removing bottom, adding default to top"}}, :require-macros {s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{schema.core/Any :schema :down = vector? :schema.core/error deque :name :value v :type this s/pred :id :error count :direction}, :order [= count deque v :schema s/pred vector? schema.core/Any :type :value :error :schema.core/error :id this :name :down :direction]}, :doc nil}
;; Analyzed by ClojureScript 1.7.189
{:use-macros {go cljs.core.async.macros}, :excludes #{}, :name decoursin.handlers, :imports nil, :requires {cljs.core.async.impl.channels cljs.core.async.impl.channels, schema.core schema.core, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async, db decoursin.db, client cljs-http.client, decoursin.db decoursin.db, s schema.core, re-frame re-frame.core, re-frame.core re-frame.core, decoursin.deque decoursin.deque}, :uses {assoc-sith decoursin.deque, is-empty? decoursin.deque, <! cljs.core.async, close! cljs.core.async, chan cljs.core.async, set-direction decoursin.deque, push-up decoursin.deque, get-first-non-empty-sith decoursin.deque, count-blanks decoursin.deque, new-deque decoursin.deque, in? decoursin.deque, push-down decoursin.deque, ManyToManyChannel cljs.core.async.impl.channels}, :defs {handle-button-click {:schema (schema.core/make-fn-schema output-schema9052 [input-schema9053]), :protocol-inline nil, :meta {:arglists (quote ([db [_ direction e]])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 180, :column 9, :end-line 180, :end-column 28, :schema (schema.core/make-fn-schema output-schema9052 [input-schema9053]), :doc "Inputs: [db [_ direction e]]\n  Returns: db/schema\n\n  Shift the deque up or down, depending on direction, and possibly\n   cancel the only pending request in that direction", :raw-arglists (quote ([db [_ direction e]]))}, :name decoursin.handlers/handle-button-click, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 28, :method-params ([G__9056 G__9057]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([db [_ direction e]])), :line 180, :end-line 180, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [_ direction e]])), :doc "Inputs: [db [_ direction e]]\n  Returns: db/schema\n\n  Shift the deque up or down, depending on direction, and possibly\n   cancel the only pending request in that direction"}, fetch-sith {:schema (schema.core/make-fn-schema output-schema8899 [input-schema8900]), :protocol-inline nil, :meta {:arglists (quote ([id])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 100, :column 9, :end-line 100, :end-column 19, :schema (schema.core/make-fn-schema output-schema8899 [input-schema8900]), :doc "Inputs: [id :- s/Int]\n  Returns: [(s/one ManyToManyChannel \"ch1\") (s/one ManyToManyChannel \"ch2\")]\n\n  Fetch the sith from the server.", :raw-arglists (quote ([id :- s/Int]))}, :name decoursin.handlers/fetch-sith, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 19, :method-params ([G__8903]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([id :- s/Int])), :line 100, :end-line 100, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Inputs: [id :- s/Int]\n  Returns: [(s/one ManyToManyChannel \"ch1\") (s/one ManyToManyChannel \"ch2\")]\n\n  Fetch the sith from the server."}, update-obi-wan-is-here {:schema (schema.core/make-fn-schema output-schema9077 [input-schema9078]), :protocol-inline nil, :meta {:arglists (quote ([planet])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 199, :column 9, :end-line 199, :end-column 31, :schema (schema.core/make-fn-schema output-schema9077 [input-schema9078]), :doc "Inputs: [planet :- db/Planet]\n\n  Take a planet, and return a function that accepts a sith.\n   Update the :obi-wan-is-here field in this sith", :raw-arglists (quote ([planet :- db/Planet]))}, :name decoursin.handlers/update-obi-wan-is-here, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 31, :method-params ([G__9081]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([planet :- db/Planet])), :line 199, :end-line 199, :max-fixed-arity 1, :fn-var true, :arglists (quote ([planet])), :doc "Inputs: [planet :- db/Planet]\n\n  Take a planet, and return a function that accepts a sith.\n   Update the :obi-wan-is-here field in this sith"}, shift {:schema (schema.core/make-fn-schema output-schema9035 [input-schema9036]), :protocol-inline nil, :meta {:arglists (quote ([siths direction])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 171, :column 9, :end-line 171, :end-column 14, :schema (schema.core/make-fn-schema output-schema9035 [input-schema9036]), :doc "Inputs: [siths :- db/Siths direction :- db/Direction]\n  Returns: db/Siths\n\n  Shift the deque up or down depending on direction. The result is\n   that we remove from one side, and we add the default blank-sith-template\n   to the other", :raw-arglists (quote ([siths :- db/Siths direction :- db/Direction]))}, :name decoursin.handlers/shift, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 14, :method-params ([G__9039 G__9040]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([siths :- db/Siths direction :- db/Direction])), :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([siths direction])), :doc "Inputs: [siths :- db/Siths direction :- db/Direction]\n  Returns: db/Siths\n\n  Shift the deque up or down depending on direction. The result is\n   that we remove from one side, and we add the default blank-sith-template\n   to the other"}, cancel-request! {:schema (schema.core/make-fn-schema output-schema8982 [input-schema8983]), :protocol-inline nil, :meta {:arglists (quote ([channel])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 141, :column 9, :end-line 141, :end-column 24, :schema (schema.core/make-fn-schema output-schema8982 [input-schema8983]), :doc "Inputs: [channel :- ManyToManyChannel]\n\n  closing the cancel channel, cancels\n   the sith-chan. Search cljs-http issues for more", :raw-arglists (quote ([channel :- ManyToManyChannel]))}, :name decoursin.handlers/cancel-request!, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 24, :method-params ([G__8986]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([channel :- ManyToManyChannel])), :line 141, :end-line 141, :max-fixed-arity 1, :fn-var true, :arglists (quote ([channel])), :doc "Inputs: [channel :- ManyToManyChannel]\n\n  closing the cancel channel, cancels\n   the sith-chan. Search cljs-http issues for more"}, check-and-throw {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 17, :column 8, :end-line 17, :end-column 23, :private true, :arglists (quote ([a-schema db])), :doc "throw an exception if db doesn't match the schema."}, :private true, :name decoursin.handlers/check-and-throw, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 23, :method-params ([a-schema db]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a-schema db])), :doc "throw an exception if db doesn't match the schema."}, opposite-direction {:schema (schema.core/make-fn-schema output-schema8998 [input-schema8999]), :protocol-inline nil, :meta {:arglists (quote ([direction])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 147, :column 9, :end-line 147, :end-column 27, :schema (schema.core/make-fn-schema output-schema8998 [input-schema8999]), :doc "Inputs: [direction :- db/Direction]\n  Returns: s/Keyword\n\n  This is a hack of sorts. The problem is that we cancel\n   the pending requests when scrolling in the opposite direction\n   that they were loaded from", :raw-arglists (quote ([direction :- db/Direction]))}, :name decoursin.handlers/opposite-direction, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 27, :method-params ([G__9002]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([direction :- db/Direction])), :line 147, :end-line 147, :max-fixed-arity 1, :fn-var true, :arglists (quote ([direction])), :doc "Inputs: [direction :- db/Direction]\n  Returns: s/Keyword\n\n  This is a hack of sorts. The problem is that we cancel\n   the pending requests when scrolling in the opposite direction\n   that they were loaded from"}, standard-middleware {:name decoursin.handlers/standard-middleware, :file "src/decoursin/handlers.cljs", :line 28, :column 1, :end-line 28, :end-column 35, :private true, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 28, :column 16, :end-line 28, :end-column 35, :private true}}, cancel-obsolete-pending-request! {:schema (schema.core/make-fn-schema output-schema9017 [input-schema9018]), :protocol-inline nil, :meta {:arglists (quote ([requests siths direction])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 157, :column 9, :end-line 157, :end-column 41, :schema (schema.core/make-fn-schema output-schema9017 [input-schema9018]), :doc "Inputs: [requests :- db/Requests siths :- db/Siths direction :- db/Direction]\n  Returns: db/Requests\n\n  A pending request is obsolete, after scroll, only when the position\n   that a sith would be placed on the deque is no longer available\n   due to scrolling while the sith is being fetched from the server. In\n   this case, the sith's position, after scroll, is <0 or >4", :raw-arglists (quote ([requests :- db/Requests siths :- db/Siths direction :- db/Direction]))}, :name decoursin.handlers/cancel-obsolete-pending-request!, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 41, :method-params ([G__9021 G__9022 G__9023]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([requests :- db/Requests siths :- db/Siths direction :- db/Direction])), :line 157, :end-line 157, :max-fixed-arity 3, :fn-var true, :arglists (quote ([requests siths direction])), :doc "Inputs: [requests :- db/Requests siths :- db/Siths direction :- db/Direction]\n  Returns: db/Requests\n\n  A pending request is obsolete, after scroll, only when the position\n   that a sith would be placed on the deque is no longer available\n   due to scrolling while the sith is being fetched from the server. In\n   this case, the sith's position, after scroll, is <0 or >4"}, cancel-all-requests! {:schema (schema.core/make-fn-schema output-schema9093 [input-schema9094]), :protocol-inline nil, :meta {:arglists (quote ([requests])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 208, :column 9, :end-line 208, :end-column 29, :schema (schema.core/make-fn-schema output-schema9093 [input-schema9094]), :doc "Inputs: [requests :- db/Requests]\n\n  Cancel all pending requests", :raw-arglists (quote ([requests :- db/Requests]))}, :name decoursin.handlers/cancel-all-requests!, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 29, :method-params ([G__9097]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([requests :- db/Requests])), :line 208, :end-line 208, :max-fixed-arity 1, :fn-var true, :arglists (quote ([requests])), :doc "Inputs: [requests :- db/Requests]\n\n  Cancel all pending requests"}, handle-set-sith {:schema (schema.core/make-fn-schema output-schema8915 [input-schema8916]), :protocol-inline nil, :meta {:arglists (quote ([db [_ id direction location]])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 111, :column 9, :end-line 111, :end-column 24, :schema (schema.core/make-fn-schema output-schema8915 [input-schema8916]), :doc "Inputs: [db [_ id direction location]]\n  Returns: db/schema\n\n  In Re-frame, to change the db after asynchronous waiting,\n   we must dispatch to a different handler to make the change;\n   for this reason, in the when clause below, we dispatch\n   to :update-siths and :update-pending-requests handlers. The\n   :update-pending-requests dispatch must occur before we resolve\n   the sith-channel using <!", :raw-arglists (quote ([db [_ id direction location]]))}, :name decoursin.handlers/handle-set-sith, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 24, :method-params ([G__8919 G__8920]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([db [_ id direction location]])), :line 111, :end-line 111, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [_ id direction location]])), :doc "Inputs: [db [_ id direction location]]\n  Returns: db/schema\n\n  In Re-frame, to change the db after asynchronous waiting,\n   we must dispatch to a different handler to make the change;\n   for this reason, in the when clause below, we dispatch\n   to :update-siths and :update-pending-requests handlers. The\n   :update-pending-requests dispatch must occur before we resolve\n   the sith-channel using <!"}, current-sith-position {:schema (schema.core/make-fn-schema output-schema8860 [input-schema8861]), :protocol-inline nil, :meta {:arglists (quote ([siths id direction])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 40, :column 9, :end-line 40, :end-column 30, :schema (schema.core/make-fn-schema output-schema8860 [input-schema8861]), :doc "Inputs: [siths id direction]\n  Returns: s/Int", :raw-arglists (quote ([siths id direction]))}, :name decoursin.handlers/current-sith-position, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 30, :method-params ([G__8864 G__8865 G__8866]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([siths id direction])), :line 40, :end-line 40, :max-fixed-arity 3, :fn-var true, :arglists (quote ([siths id direction])), :doc "Inputs: [siths id direction]\n  Returns: s/Int"}, find-location {:schema (schema.core/make-fn-schema output-schema8878 [input-schema8879]), :protocol-inline nil, :meta {:arglists (quote ([siths sith])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 57, :column 9, :end-line 57, :end-column 22, :schema (schema.core/make-fn-schema output-schema8878 [input-schema8879]), :doc "Inputs: [siths sith]\n  Returns: s/Int\n\n  Returns the location in the siths\n   where the sith should be placed [0-4],\n   determined by where it's apprentice\n   exclusive or master is located.", :raw-arglists (quote ([siths sith]))}, :name decoursin.handlers/find-location, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 22, :method-params ([G__8882 G__8883]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([siths sith])), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([siths sith])), :doc "Inputs: [siths sith]\n  Returns: s/Int\n\n  Returns the location in the siths\n   where the sith should be placed [0-4],\n   determined by where it's apprentice\n   exclusive or master is located."}, check-schema-mw {:name decoursin.handlers/check-schema-mw, :file "src/decoursin/handlers.cljs", :line 26, :column 1, :end-line 26, :end-column 31, :private true, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 26, :column 16, :end-line 26, :end-column 31, :private true}}, handle-ws-message {:schema (schema.core/make-fn-schema output-schema9109 [input-schema9110]), :protocol-inline nil, :meta {:arglists (quote ([db [_ planet]])), :file "/home/nick/Working/flux-challenge/src/decoursin/handlers.cljs", :line 218, :column 9, :end-line 218, :end-column 26, :schema (schema.core/make-fn-schema output-schema9109 [input-schema9110]), :doc "Inputs: [db [_ planet]]\n\n  handle websocket messages, by updating the :planet field\n   and updating :obi-wan-is-here field in all siths, and\n   conditionally remove all pending requests", :raw-arglists (quote ([db [_ planet]]))}, :name decoursin.handlers/handle-ws-message, :variadic false, :file "src/decoursin/handlers.cljs", :end-column 26, :method-params ([G__9113 G__9114]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([db [_ planet]])), :line 218, :end-line 218, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db [_ planet]])), :doc "Inputs: [db [_ planet]]\n\n  handle websocket messages, by updating the :planet field\n   and updating :obi-wan-is-here field in all siths, and\n   conditionally remove all pending requests"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{s/Keyword handle-button-click :update-siths :initialize-db schema.core/Any :schema :down :siths fetch-sith update-obi-wan-is-here :buttons direction :schema.core/error arg1 db/schema :else :button-click shift db/Requests cancel-request! :name opposite-direction siths :value :requests s/one db/Siths :channel :recur :type db db/Direction :up cancel-obsolete-pending-request! s/Int :planet cancel-all-requests! requests :with-credentials? :apprentice channel :id handle-set-sith db/Planet planet :ws-message :accepts :error sith :cancel :update-pending-requests ManyToManyChannel current-sith-position :json find-location :master id :homeworld :obi-wan-is-here :body :doc :direction handle-ws-message :set-sith}, :order [:initialize-db siths :schema schema.core/Any id direction current-sith-position s/Int :type :value :error :schema.core/error :id :up :down :else sith find-location :doc :direction :master :apprentice :update-siths :siths :buttons :name :planet :homeworld :obi-wan-is-here :requests :channel :update-pending-requests fetch-sith s/one ManyToManyChannel :accepts :with-credentials? :cancel :json :body db arg1 handle-set-sith db/schema :recur :set-sith channel cancel-request! db/Direction opposite-direction s/Keyword requests db/Requests db/Siths cancel-obsolete-pending-request! shift handle-button-click :button-click planet db/Planet update-obi-wan-is-here cancel-all-requests! handle-ws-message :ws-message]}, :doc nil}
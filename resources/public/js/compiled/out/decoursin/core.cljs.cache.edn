;; Analyzed by ClojureScript 1.7.189
{:use-macros {go-loop cljs.core.async.macros}, :excludes #{}, :name decoursin.core, :imports nil, :requires {reagent reagent.core, a cljs.core.async, views decoursin.views, decoursin.subs decoursin.subs, reagent.core reagent.core, chord.client chord.client, cljs.core.async cljs.core.async, decoursin.views decoursin.views, config decoursin.config, decoursin.handlers decoursin.handlers, decoursin.config decoursin.config, re-frame re-frame.core, re-frame.core re-frame.core}, :uses {ws-ch chord.client}, :defs {connect-to-websocket {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/core.cljs", :line 15, :column 7, :end-line 15, :end-column 27, :arglists (quote ([]))}, :name decoursin.core/connect-to-websocket, :variadic false, :file "src/decoursin/core.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 15, :end-line 15, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mount-root {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/core.cljs", :line 24, :column 7, :end-line 24, :end-column 17, :arglists (quote ([]))}, :name decoursin.core/mount-root, :variadic false, :file "src/decoursin/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, init {:protocol-inline nil, :meta {:file "/home/nick/Working/flux-challenge/src/decoursin/core.cljs", :line 29, :column 16, :end-line 29, :end-column 20, :export true, :arglists (quote ([]))}, :name decoursin.core/init, :variadic false, :file "src/decoursin/core.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 29, :end-line 29, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:initialize-db :format :else :recur :ws-channel :up :read-ch :ws-message :error :json :message :set-sith}, :order [:recur :ws-channel :format :read-ch :json :message :error :ws-message :else :set-sith :up :initialize-db]}, :doc nil}